
CAN_tempsens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002c98  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000908f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d1  00000000  00000000  000290cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  0002ae28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e524  00000000  00000000  0002b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065d3  00000000  00000000  00049b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c206b  00000000  00000000  000500ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011215a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  001121d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c38 	.word	0x08002c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002c38 	.word	0x08002c38

08000218 <display_digit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display_digit(uint8_t number,uint8_t decimal){
 8000218:	b4b0      	push	{r4, r5, r7}
 800021a:	b08b      	sub	sp, #44	; 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	460a      	mov	r2, r1
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	4613      	mov	r3, r2
 8000226:	71bb      	strb	r3, [r7, #6]
	uint32_t odr;
	uint32_t newportdata;

	uint16_t digits[] =
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <display_digit+0x5c>)
 800022a:	f107 040c 	add.w	r4, r7, #12
 800022e:	461d      	mov	r5, r3
 8000230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000234:	682b      	ldr	r3, [r5, #0]
 8000236:	6023      	str	r3, [r4, #0]
			0b0110101100000000,
			0b0101010000000000,
			0b0111111100000000,
			0b0111110000000000};

	odr = GPIOB->ODR;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <display_digit+0x60>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	623b      	str	r3, [r7, #32]
	newportdata = (uint32_t)((0x00FF & odr) | (digits[number]));
 800023e:	6a3b      	ldr	r3, [r7, #32]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800024a:	440b      	add	r3, r1
 800024c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000250:	4313      	orrs	r3, r2
 8000252:	627b      	str	r3, [r7, #36]	; 0x24
	if(decimal){
 8000254:	79bb      	ldrb	r3, [r7, #6]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <display_digit+0x4a>
		newportdata = newportdata | 0x8000;
 800025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000260:	627b      	str	r3, [r7, #36]	; 0x24
	}
	GPIOB->ODR = newportdata;
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <display_digit+0x60>)
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	6153      	str	r3, [r2, #20]


}
 8000268:	bf00      	nop
 800026a:	372c      	adds	r7, #44	; 0x2c
 800026c:	46bd      	mov	sp, r7
 800026e:	bcb0      	pop	{r4, r5, r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	08002c50 	.word	0x08002c50
 8000278:	48000400 	.word	0x48000400

0800027c <display_number>:
void write_portA(uint8_t data){
	uint16_t odr = GPIOA->ODR;
	GPIOA->ODR = (uint32_t)((0b1111111111000000 & odr) | data);
}

void display_number(uint16_t number,uint8_t divisor,uint8_t display){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	80fb      	strh	r3, [r7, #6]
 8000286:	460b      	mov	r3, r1
 8000288:	717b      	strb	r3, [r7, #5]
 800028a:	4613      	mov	r3, r2
 800028c:	713b      	strb	r3, [r7, #4]
	uint16_t digit = (number) % 10;
 800028e:	88fa      	ldrh	r2, [r7, #6]
 8000290:	4b45      	ldr	r3, [pc, #276]	; (80003a8 <display_number+0x12c>)
 8000292:	fba3 1302 	umull	r1, r3, r3, r2
 8000296:	08d9      	lsrs	r1, r3, #3
 8000298:	460b      	mov	r3, r1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	81fb      	strh	r3, [r7, #14]

	GPIOA->ODR = (uint32_t)(((uint32_t)!0b00111111) & GPIOA->ODR);
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
	display_digit(digit,0);
 80002b2:	89fb      	ldrh	r3, [r7, #14]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ffad 	bl	8000218 <display_digit>
	if(display == 1){
 80002be:	793b      	ldrb	r3, [r7, #4]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d106      	bne.n	80002d2 <display_number+0x56>
		HAL_GPIO_WritePin(GPIOA,DIG1_1_Pin,GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2104      	movs	r1, #4
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 fc5a 	bl	8001b84 <HAL_GPIO_WritePin>
 80002d0:	e005      	b.n	80002de <display_number+0x62>
	}else{
		HAL_GPIO_WritePin(GPIOA,DIG1_2_Pin,GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2108      	movs	r1, #8
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f001 fc53 	bl	8001b84 <HAL_GPIO_WritePin>
	}

	digit = (number/10) % 10;
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	4a31      	ldr	r2, [pc, #196]	; (80003a8 <display_number+0x12c>)
 80002e2:	fba2 2303 	umull	r2, r3, r2, r3
 80002e6:	08db      	lsrs	r3, r3, #3
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <display_number+0x12c>)
 80002ec:	fba3 1302 	umull	r1, r3, r3, r2
 80002f0:	08d9      	lsrs	r1, r3, #3
 80002f2:	460b      	mov	r3, r1
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	81fb      	strh	r3, [r7, #14]

	GPIOA->ODR = (uint32_t)(((uint32_t)!0b00111111) & GPIOA->ODR);
 80002fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
	if(display == 1){
 800030c:	793b      	ldrb	r3, [r7, #4]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d10c      	bne.n	800032c <display_number+0xb0>
		display_digit(digit,1);
 8000312:	89fb      	ldrh	r3, [r7, #14]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2101      	movs	r1, #1
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff7d 	bl	8000218 <display_digit>
		HAL_GPIO_WritePin(GPIOA,DIG2_1_Pin,GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2102      	movs	r1, #2
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f001 fc2d 	bl	8001b84 <HAL_GPIO_WritePin>
 800032a:	e00b      	b.n	8000344 <display_number+0xc8>
	}else{
		display_digit(digit,0);
 800032c:	89fb      	ldrh	r3, [r7, #14]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff70 	bl	8000218 <display_digit>
		HAL_GPIO_WritePin(GPIOA,DIG2_2_Pin,GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2110      	movs	r1, #16
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f001 fc20 	bl	8001b84 <HAL_GPIO_WritePin>
	}

	digit = (number/100) % 10;
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <display_number+0x130>)
 8000348:	fba2 2303 	umull	r2, r3, r2, r3
 800034c:	095b      	lsrs	r3, r3, #5
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <display_number+0x12c>)
 8000352:	fba3 1302 	umull	r1, r3, r3, r2
 8000356:	08d9      	lsrs	r1, r3, #3
 8000358:	460b      	mov	r3, r1
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	440b      	add	r3, r1
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	81fb      	strh	r3, [r7, #14]

	GPIOA->ODR = (uint32_t)(((uint32_t)!0b00111111) & GPIOA->ODR);
 8000364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
	display_digit(digit,0);
 8000372:	89fb      	ldrh	r3, [r7, #14]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff4d 	bl	8000218 <display_digit>
	if(display == 1){
 800037e:	793b      	ldrb	r3, [r7, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d106      	bne.n	8000392 <display_number+0x116>
		HAL_GPIO_WritePin(GPIOA,DIG3_1_Pin,GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2101      	movs	r1, #1
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f001 fbfa 	bl	8001b84 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA,DIG3_2_Pin,GPIO_PIN_SET);
	}
}
 8000390:	e005      	b.n	800039e <display_number+0x122>
		HAL_GPIO_WritePin(GPIOA,DIG3_2_Pin,GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2120      	movs	r1, #32
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f001 fbf3 	bl	8001b84 <HAL_GPIO_WritePin>
}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	cccccccd 	.word	0xcccccccd
 80003ac:	51eb851f 	.word	0x51eb851f

080003b0 <HAL2_Delay>:

void HAL2_Delay(uint32_t Delay)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003b8:	f000 fb9c 	bl	8000af4 <HAL_GetTick>
 80003bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c8:	d013      	beq.n	80003f2 <HAL2_Delay+0x42>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <HAL2_Delay+0x5c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]

  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003d4:	e00d      	b.n	80003f2 <HAL2_Delay+0x42>
  {
	    display_number(disp1_number,0,1);
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <HAL2_Delay+0x60>)
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff4c 	bl	800027c <display_number>
	    display_number(disp2_number,0,0);
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL2_Delay+0x64>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff45 	bl	800027c <display_number>
  while ((HAL_GetTick() - tickstart) < wait)
 80003f2:	f000 fb7f 	bl	8000af4 <HAL_GetTick>
 80003f6:	4602      	mov	r2, r0
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d8e9      	bhi.n	80003d6 <HAL2_Delay+0x26>
  }
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000008 	.word	0x20000008
 8000410:	2000002a 	.word	0x2000002a
 8000414:	20000028 	.word	0x20000028

08000418 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOA,LED1_Pin);
 8000422:	2140      	movs	r1, #64	; 0x40
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f001 fbc4 	bl	8001bb4 <HAL_GPIO_TogglePin>
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d058      	beq.n	80004e8 <HAL_FDCAN_RxFifo0Callback+0xd0>
  {
    /* Retrieve Rx messages from RX FIFO0 */
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000436:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000438:	4a2e      	ldr	r2, [pc, #184]	; (80004f4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fe51 	bl	80010e4 <HAL_FDCAN_GetRxMessage>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <HAL_FDCAN_RxFifo0Callback+0x34>
	{
	  Error_Handler();
 8000448:	f000 fa00 	bl	800084c <Error_Handler>
	}
	if(RxHeader.Identifier == 0x1B030141){
 800044c:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d139      	bne.n	80004ca <HAL_FDCAN_RxFifo0Callback+0xb2>
		uint16_t in_temp;
		uint16_t full_cel;
		uint16_t cel_frac_bits;
		uint16_t cel_frac;

		in_temp        = (RxData[1] << 8) | RxData[2];
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	021b      	lsls	r3, r3, #8
 800045c:	b21a      	sxth	r2, r3
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	b21b      	sxth	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b21b      	sxth	r3, r3
 8000468:	82fb      	strh	r3, [r7, #22]
		full_cel       = (in_temp & 0b1111111111000000) >> 6;
 800046a:	8afb      	ldrh	r3, [r7, #22]
 800046c:	099b      	lsrs	r3, r3, #6
 800046e:	82bb      	strh	r3, [r7, #20]
		cel_frac_bits  = (in_temp & 0b000000000000111111) >> 2;
 8000470:	8afb      	ldrh	r3, [r7, #22]
 8000472:	109b      	asrs	r3, r3, #2
 8000474:	b29b      	uxth	r3, r3
 8000476:	f003 030f 	and.w	r3, r3, #15
 800047a:	827b      	strh	r3, [r7, #18]
		cel_frac       = cel_frac_bits*625; //fractional parts of the temperature, in integer form
 800047c:	8a7b      	ldrh	r3, [r7, #18]
 800047e:	461a      	mov	r2, r3
 8000480:	0152      	lsls	r2, r2, #5
 8000482:	1ad2      	subs	r2, r2, r3
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	4413      	add	r3, r2
 8000488:	461a      	mov	r2, r3
 800048a:	0091      	lsls	r1, r2, #2
 800048c:	461a      	mov	r2, r3
 800048e:	460b      	mov	r3, r1
 8000490:	4413      	add	r3, r2
 8000492:	823b      	strh	r3, [r7, #16]
		cel_frac       = cel_frac/1000;
 8000494:	8a3b      	ldrh	r3, [r7, #16]
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000498:	fba2 2303 	umull	r2, r3, r2, r3
 800049c:	099b      	lsrs	r3, r3, #6
 800049e:	823b      	strh	r3, [r7, #16]
		if(cel_frac > 9){
 80004a0:	8a3b      	ldrh	r3, [r7, #16]
 80004a2:	2b09      	cmp	r3, #9
 80004a4:	d903      	bls.n	80004ae <HAL_FDCAN_RxFifo0Callback+0x96>
			disp2_number = 88;
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80004a8:	2258      	movs	r2, #88	; 0x58
 80004aa:	801a      	strh	r2, [r3, #0]
 80004ac:	e002      	b.n	80004b4 <HAL_FDCAN_RxFifo0Callback+0x9c>
		}else{
			disp2_number = 11;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	801a      	strh	r2, [r3, #0]
		}

		disp1_number   = (full_cel * 10) + cel_frac;
 80004b4:	8abb      	ldrh	r3, [r7, #20]
 80004b6:	461a      	mov	r2, r3
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	b29a      	uxth	r2, r3
 80004c0:	8a3b      	ldrh	r3, [r7, #16]
 80004c2:	4413      	add	r3, r2
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80004c8:	801a      	strh	r2, [r3, #0]

	}
	if(RxHeader.Identifier == 0x14002101){
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d109      	bne.n	80004e8 <HAL_FDCAN_RxFifo0Callback+0xd0>
		uint16_t foo; //Possible loss with signed values
		foo = (RxData[1] << 8) | RxData[2];
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	021b      	lsls	r3, r3, #8
 80004da:	b21a      	sxth	r2, r3
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	81fb      	strh	r3, [r7, #14]
	//	disp2_number = (foo & 0b1111111111000000) >> 6;
	}

  }
}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000009c 	.word	0x2000009c
 80004f4:	200000c8 	.word	0x200000c8
 80004f8:	1b030141 	.word	0x1b030141
 80004fc:	10624dd3 	.word	0x10624dd3
 8000500:	20000028 	.word	0x20000028
 8000504:	2000002a 	.word	0x2000002a
 8000508:	14002101 	.word	0x14002101

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa8b 	bl	8000a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f80e 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f906 	bl	8000728 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800051c:	f000 f874 	bl	8000608 <MX_FDCAN1_Init>
    /* USER CODE BEGIN 3 */
	//  a++;

	  //disp1_number = a;
	 // disp2_number = a;
	  HAL2_Delay(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f7ff ff44 	bl	80003b0 <HAL2_Delay>
	  HAL_GPIO_TogglePin(GPIOA,LED2_Pin);
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 fb41 	bl	8001bb4 <HAL_GPIO_TogglePin>
	  HAL2_Delay(1000);
 8000532:	e7f5      	b.n	8000520 <main+0x14>

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0a8      	sub	sp, #160	; 0xa0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800053e:	2238      	movs	r2, #56	; 0x38
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fb70 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2254      	movs	r2, #84	; 0x54
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fb62 	bl	8002c28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000568:	f001 fb3e 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 15;
 800058c:	230f      	movs	r3, #15
 800058e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000598:	2306      	movs	r3, #6
 800059a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fbd1 	bl	8001d50 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b4:	f000 f94a 	bl	800084c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fed4 	bl	8002380 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005de:	f000 f935 	bl	800084c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80005e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f8a9 	bl	8002748 <HAL_RCCEx_PeriphCLKConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005fc:	f000 f926 	bl	800084c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	37a0      	adds	r7, #160	; 0xa0
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	FDCAN_FilterTypeDef sFilterConfig;
		/* Configure Rx filter */
		sFilterConfig.FilterConfig = FDCAN_FILTER_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterIndex = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800061a:	2302      	movs	r3, #2
 800061c:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterID1 = 0x000;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterID2 = 0x7FF;
 8000622:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000626:	617b      	str	r3, [r7, #20]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000628:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_FDCAN1_Init+0x114>)
 800062a:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <MX_FDCAN1_Init+0x118>)
 800062c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000634:	4b39      	ldr	r3, [pc, #228]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_FDCAN1_Init+0x114>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000640:	4b36      	ldr	r3, [pc, #216]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000642:	2200      	movs	r2, #0
 8000644:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000648:	2200      	movs	r2, #0
 800064a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <MX_FDCAN1_Init+0x114>)
 800064e:	2200      	movs	r2, #0
 8000650:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000654:	2205      	movs	r2, #5
 8000656:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <MX_FDCAN1_Init+0x114>)
 800065a:	2210      	movs	r2, #16
 800065c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000660:	220d      	movs	r2, #13
 8000662:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000666:	2202      	movs	r2, #2
 8000668:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_FDCAN1_Init+0x114>)
 800066c:	2205      	movs	r2, #5
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 16;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000672:	2210      	movs	r2, #16
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000678:	220d      	movs	r2, #13
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <MX_FDCAN1_Init+0x114>)
 800067e:	2202      	movs	r2, #2
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <MX_FDCAN1_Init+0x114>)
 800068a:	2200      	movs	r2, #0
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000694:	4821      	ldr	r0, [pc, #132]	; (800071c <MX_FDCAN1_Init+0x114>)
 8000696:	f000 fb49 	bl	8000d2c <HAL_FDCAN_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_FDCAN1_Init+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f8d4 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <MX_FDCAN1_Init+0x114>)
 80006aa:	f000 fc99 	bl	8000fe0 <HAL_FDCAN_ConfigFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_FDCAN1_Init+0xb0>
  		Error_Handler();
 80006b4:	f000 f8ca 	bl	800084c <Error_Handler>
  	}

  	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK){
 80006b8:	2200      	movs	r2, #0
 80006ba:	2101      	movs	r1, #1
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <MX_FDCAN1_Init+0x114>)
 80006be:	f000 fdeb 	bl	8001298 <HAL_FDCAN_ActivateNotification>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_FDCAN1_Init+0xc4>
  	  Error_Handler();
 80006c8:	f000 f8c0 	bl	800084c <Error_Handler>
    }

  	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_FDCAN1_Init+0x114>)
 80006ce:	f000 fce1 	bl	8001094 <HAL_FDCAN_Start>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_FDCAN1_Init+0xd4>
  		Error_Handler();
 80006d8:	f000 f8b8 	bl	800084c <Error_Handler>
  	}

  	//INIT TXheader frame
	//TxHeader.Identifier = 0x1FFFFFFF;
	TxHeader.Identifier = 0b00101111111111111111111111111; //SNS_class
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 80006de:	f06f 427a 	mvn.w	r2, #4194304000	; 0xfa000000
 80006e2:	601a      	str	r2, [r3, #0]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 80006fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006fe:	60da      	str	r2, [r3, #12]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
	TxHeader.MessageMarker = 0;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MX_FDCAN1_Init+0x11c>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	40006400 	.word	0x40006400
 8000724:	200000a4 	.word	0x200000a4

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_GPIO_Init+0x118>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <MX_GPIO_Init+0x118>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x118>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x118>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a39      	ldr	r2, [pc, #228]	; (8000840 <MX_GPIO_Init+0x118>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_GPIO_Init+0x118>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_GPIO_Init+0x118>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <MX_GPIO_Init+0x118>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_GPIO_Init+0x118>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_sig1_Pin|EXT_sig2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800078c:	482d      	ldr	r0, [pc, #180]	; (8000844 <MX_GPIO_Init+0x11c>)
 800078e:	f001 f9f9 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIG3_1_Pin|DIG2_1_Pin|DIG1_1_Pin|DIG1_2_Pin
 8000792:	2200      	movs	r2, #0
 8000794:	21df      	movs	r1, #223	; 0xdf
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 f9f3 	bl	8001b84 <HAL_GPIO_WritePin>
                          |DIG2_2_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_F_Pin|LED_A_Pin|LED_G_Pin
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80007a4:	4828      	ldr	r0, [pc, #160]	; (8000848 <MX_GPIO_Init+0x120>)
 80007a6:	f001 f9ed 	bl	8001b84 <HAL_GPIO_WritePin>
                          |LED_C_Pin|LED_DP_Pin|LED_D_Pin|LED_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EXT_sig1_Pin EXT_sig2_Pin */
  GPIO_InitStruct.Pin = EXT_sig1_Pin|EXT_sig2_Pin;
 80007aa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4820      	ldr	r0, [pc, #128]	; (8000844 <MX_GPIO_Init+0x11c>)
 80007c4:	f001 f85c 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_sig3_Pin */
  GPIO_InitStruct.Pin = EXT_sig3_Pin;
 80007c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_sig3_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <MX_GPIO_Init+0x11c>)
 80007de:	f001 f84f 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG3_1_Pin DIG2_1_Pin DIG1_1_Pin DIG1_2_Pin
                           DIG2_2_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = DIG3_1_Pin|DIG2_1_Pin|DIG1_1_Pin|DIG1_2_Pin
 80007e2:	23df      	movs	r3, #223	; 0xdf
 80007e4:	60fb      	str	r3, [r7, #12]
                          |DIG2_2_Pin|LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f001 f840 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIG3_2_Pin */
  GPIO_InitStruct.Pin = DIG3_2_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIG3_2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f001 f833 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_F_Pin LED_A_Pin LED_G_Pin
                           LED_C_Pin LED_DP_Pin LED_D_Pin LED_E_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_F_Pin|LED_A_Pin|LED_G_Pin
 800081a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800081e:	60fb      	str	r3, [r7, #12]
                          |LED_C_Pin|LED_DP_Pin|LED_D_Pin|LED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x120>)
 8000834:	f001 f824 	bl	8001880 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000800 	.word	0x48000800
 8000848:	48000400 	.word	0x48000400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000892:	f001 fa4d 	bl	8001d30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <HAL_FDCAN_MspInit+0x90>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d131      	bne.n	800092a <HAL_FDCAN_MspInit+0x86>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_FDCAN_MspInit+0x94>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000908:	2309      	movs	r3, #9
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f000 ffb3 	bl	8001880 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2015      	movs	r0, #21
 8000920:	f000 f9cf 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000924:	2015      	movs	r0, #21
 8000926:	f000 f9e6 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40006400 	.word	0x40006400
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f89e 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <FDCAN1_IT0_IRQHandler+0x10>)
 800099e:	f000 fd61 	bl	8001464 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000002c 	.word	0x2000002c

080009ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <SystemInit+0x28>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <SystemInit+0x28>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SystemInit+0x28>)
 80009c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c6:	609a      	str	r2, [r3, #8]
#endif
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a02:	f7ff ffd3 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f002 f8eb 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0a:	f7ff fd7f 	bl	800050c <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	200000f4 	.word	0x200000f4

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>

08000a2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f939 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f80e 	bl	8000a5c <HAL_InitTick>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	e001      	b.n	8000a50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a4c:	f7ff ff06 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a50:	79fb      	ldrb	r3, [r7, #7]

}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_InitTick+0x68>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d022      	beq.n	8000ab6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_InitTick+0x6c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_InitTick+0x68>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f944 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10f      	bne.n	8000ab0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d809      	bhi.n	8000aaa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a96:	2200      	movs	r2, #0
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9e:	f000 f910 	bl	8000cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_InitTick+0x70>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	e007      	b.n	8000aba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e004      	b.n	8000aba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e001      	b.n	8000aba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x20>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x1c>)
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	200000f0 	.word	0x200000f0
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000f0 	.word	0x200000f0

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff40 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff90 	bl	8000c00 <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5f 	bl	8000bac <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff33 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa4 	bl	8000c68 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e147      	b.n	8000fce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d106      	bne.n	8000d58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fda6 	bl	80008a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0210 	bic.w	r2, r2, #16
 8000d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d68:	f7ff fec4 	bl	8000af4 <HAL_GetTick>
 8000d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d6e:	e012      	b.n	8000d96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d70:	f7ff fec0 	bl	8000af4 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d90b      	bls.n	8000d96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e11b      	b.n	8000fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d0e5      	beq.n	8000d70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db4:	f7ff fe9e 	bl	8000af4 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dba:	e012      	b.n	8000de2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dbc:	f7ff fe9a 	bl	8000af4 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b0a      	cmp	r3, #10
 8000dc8:	d90b      	bls.n	8000de2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f043 0201 	orr.w	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0f5      	b.n	8000fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0e5      	beq.n	8000dbc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0202 	orr.w	r2, r2, #2
 8000dfe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a74      	ldr	r2, [pc, #464]	; (8000fd8 <HAL_FDCAN_Init+0x2ac>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d103      	bne.n	8000e12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e0a:	4a74      	ldr	r2, [pc, #464]	; (8000fdc <HAL_FDCAN_Init+0x2b0>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7c1b      	ldrb	r3, [r3, #16]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d108      	bne.n	8000e2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	699a      	ldr	r2, [r3, #24]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e28:	619a      	str	r2, [r3, #24]
 8000e2a:	e007      	b.n	8000e3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7c5b      	ldrb	r3, [r3, #17]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e52:	619a      	str	r2, [r3, #24]
 8000e54:	e007      	b.n	8000e66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7c9b      	ldrb	r3, [r3, #18]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e7c:	619a      	str	r2, [r3, #24]
 8000e7e:	e007      	b.n	8000e90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000eb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	699a      	ldr	r2, [r3, #24]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
 8000edc:	619a      	str	r2, [r3, #24]
 8000ede:	e02c      	b.n	8000f3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d028      	beq.n	8000f3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d01c      	beq.n	8000f2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000efe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0210 	orr.w	r2, r2, #16
 8000f0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d110      	bne.n	8000f3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0220 	orr.w	r2, r2, #32
 8000f26:	619a      	str	r2, [r3, #24]
 8000f28:	e007      	b.n	8000f3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f6e:	d115      	bne.n	8000f9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	3b01      	subs	r3, #1
 8000f86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	3b01      	subs	r3, #1
 8000f92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fbf8 	bl	80017a8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40006400 	.word	0x40006400
 8000fdc:	40006500 	.word	0x40006500

08000fe0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000ff0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d002      	beq.n	8000ffe <HAL_FDCAN_ConfigFilter+0x1e>
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d13d      	bne.n	800107a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d119      	bne.n	800103a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001012:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800101a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e01d      	b.n	8001076 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	075a      	lsls	r2, r3, #29
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	079a      	lsls	r2, r3, #30
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3304      	adds	r3, #4
 800106e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e006      	b.n	8001088 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d110      	bne.n	80010ca <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e006      	b.n	80010d8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f043 0204 	orr.w	r2, r3, #4
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
  }
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010f8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80010fa:	7efb      	ldrb	r3, [r7, #27]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	f040 80bc 	bne.w	800127a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b40      	cmp	r3, #64	; 0x40
 8001106:	d121      	bne.n	800114c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	2b00      	cmp	r3, #0
 8001116:	d107      	bne.n	8001128 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0af      	b.n	8001288 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	440b      	add	r3, r1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	e020      	b.n	800118e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e08d      	b.n	8001288 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d107      	bne.n	80011b2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e005      	b.n	80011be <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	3304      	adds	r3, #4
 80011da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0e1b      	lsrs	r3, r3, #24
 8001210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0fda      	lsrs	r2, r3, #31
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3304      	adds	r3, #4
 8001226:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	e00a      	b.n	8001248 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	441a      	add	r2, r3
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	440b      	add	r3, r1
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	3301      	adds	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	461a      	mov	r2, r3
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	4293      	cmp	r3, r2
 8001258:	d3eb      	bcc.n	8001232 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b40      	cmp	r3, #64	; 0x40
 800125e:	d105      	bne.n	800126c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800126a:	e004      	b.n	8001276 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e006      	b.n	8001288 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f043 0208 	orr.w	r2, r3, #8
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	372c      	adds	r7, #44	; 0x2c
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	08002c74 	.word	0x08002c74

08001298 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012aa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <HAL_FDCAN_ActivateNotification+0x22>
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f040 80c8 	bne.w	800144a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03b      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d031      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d027      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01d      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d013      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00c      	beq.n	800135e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d107      	bne.n	800135e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d13b      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d131      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d127      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11d      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00c      	beq.n	80013fa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0202 	orr.w	r2, r2, #2
 80013f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	430a      	orrs	r2, r1
 8001414:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	430a      	orrs	r2, r1
 8001432:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	430a      	orrs	r2, r1
 8001444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e006      	b.n	8001458 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	4013      	ands	r3, r2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	4013      	ands	r3, r2
 800149a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014a6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ba:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80014be:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014d6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f92e 	bl	800176a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d014      	beq.n	8001554 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001532:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800154c:	6939      	ldr	r1, [r7, #16]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f8ec 	bl	800172c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8b6 	bl	80016d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001578:	6a39      	ldr	r1, [r7, #32]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ff4c 	bl	8000418 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800158e:	69f9      	ldr	r1, [r7, #28]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8ab 	bl	80016ec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00e      	beq.n	80015c2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8a0 	bl	8001702 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01a      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d013      	beq.n	8001606 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015fe:	68f9      	ldr	r1, [r7, #12]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f888 	bl	8001716 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800160c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00e      	beq.n	8001632 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f888 	bl	8001742 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001656:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f87c 	bl	8001756 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d011      	beq.n	8001690 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800169e:	6979      	ldr	r1, [r7, #20]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f876 	bl	8001792 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f858 	bl	800177e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80017b2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d103      	bne.n	80017c6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80017c4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d103      	bne.n	80017d8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80017d6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017e6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800180c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	061a      	lsls	r2, r3, #24
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e005      	b.n	800185a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3304      	adds	r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f3      	bcc.n	800184e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	4000a400 	.word	0x4000a400
 8001878:	40006800 	.word	0x40006800
 800187c:	40006c00 	.word	0x40006c00

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800188e:	e15a      	b.n	8001b46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 814c 	beq.w	8001b40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d00b      	beq.n	80018c8 <HAL_GPIO_Init+0x48>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018bc:	2b11      	cmp	r3, #17
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d130      	bne.n	800192a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fe:	2201      	movs	r2, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	f003 0201 	and.w	r2, r3, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0xea>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d123      	bne.n	80019b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	6939      	ldr	r1, [r7, #16]
 80019ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0203 	and.w	r2, r3, #3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a6 	beq.w	8001b40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_GPIO_Init+0x2e4>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f8:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <HAL_GPIO_Init+0x2e4>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001a00:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x2e4>)
 8001a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0c:	4a56      	ldr	r2, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a36:	d01f      	beq.n	8001a78 <HAL_GPIO_Init+0x1f8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d019      	beq.n	8001a74 <HAL_GPIO_Init+0x1f4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <HAL_GPIO_Init+0x2f0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1f0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a49      	ldr	r2, [pc, #292]	; (8001b78 <HAL_GPIO_Init+0x2f8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a60:	2305      	movs	r3, #5
 8001a62:	e00a      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a64:	2306      	movs	r3, #6
 8001a66:	e008      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f ae9d 	bne.w	8001890 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	48001000 	.word	0x48001000
 8001b7c:	48001400 	.word	0x48001400
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43d9      	mvns	r1, r3
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d141      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d131      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3a:	e002      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d102      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d158      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e057      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c78:	e04d      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d141      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8e:	d131      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2232      	movs	r2, #50	; 0x32
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc6:	e002      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d112      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e011      	b.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d04:	e007      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40007000 	.word	0x40007000
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e308      	b.n	8002374 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4ba3      	ldr	r3, [pc, #652]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4ba0      	ldr	r3, [pc, #640]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3e>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b99      	ldr	r3, [pc, #612]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e2e3      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a90      	ldr	r2, [pc, #576]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a87      	ldr	r2, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b84      	ldr	r3, [pc, #528]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a83      	ldr	r2, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a80      	ldr	r2, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe74 	bl	8000af4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe fe70 	bl	8000af4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e2a8      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe fe60 	bl	8000af4 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe fe5c 	bl	8000af4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e294      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x136>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_OscConfig+0x13c>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d11f      	bne.n	8001ecc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x154>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e267      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4952      	ldr	r1, [pc, #328]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fdcd 	bl	8000a5c <HAL_InitTick>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e253      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe08 	bl	8000af4 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fe04 	bl	8000af4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e23c      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efa:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	4939      	ldr	r1, [pc, #228]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fde4 	bl	8000af4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7fe fde0 	bl	8000af4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e218      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1e0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7fe fdbd 	bl	8000af4 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fdb9 	bl	8000af4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1f1      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ef      	beq.n	8001f7e <HAL_RCC_OscConfig+0x22e>
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fda0 	bl	8000af4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fd9c 	bl	8000af4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1d4      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ef      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ab 	beq.w	800213c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x2b4>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e005      	b.n	8002006 <HAL_RCC_OscConfig+0x2b6>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	20000004 	.word	0x20000004
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4baf      	ldr	r3, [pc, #700]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4aae      	ldr	r2, [pc, #696]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
 8002016:	4bac      	ldr	r3, [pc, #688]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4ba9      	ldr	r3, [pc, #676]	; (80022cc <HAL_RCC_OscConfig+0x57c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002032:	4ba6      	ldr	r3, [pc, #664]	; (80022cc <HAL_RCC_OscConfig+0x57c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4aa5      	ldr	r2, [pc, #660]	; (80022cc <HAL_RCC_OscConfig+0x57c>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7fe fd59 	bl	8000af4 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7fe fd55 	bl	8000af4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e18d      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002058:	4b9c      	ldr	r3, [pc, #624]	; (80022cc <HAL_RCC_OscConfig+0x57c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d108      	bne.n	800207e <HAL_RCC_OscConfig+0x32e>
 800206c:	4b96      	ldr	r3, [pc, #600]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	e024      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d110      	bne.n	80020a8 <HAL_RCC_OscConfig+0x358>
 8002086:	4b90      	ldr	r3, [pc, #576]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a8e      	ldr	r2, [pc, #568]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002096:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x378>
 80020a8:	4b87      	ldr	r3, [pc, #540]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a86      	ldr	r2, [pc, #536]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a82      	ldr	r2, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fd10 	bl	8000af4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fd0c 	bl	8000af4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e142      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ed      	beq.n	80020d8 <HAL_RCC_OscConfig+0x388>
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe fcf9 	bl	8000af4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fcf5 	bl	8000af4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e12b      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ed      	bne.n	8002106 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a64      	ldr	r2, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002150:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002156:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe fcc8 	bl	8000af4 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002168:	f7fe fcc4 	bl	8000af4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0fc      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x418>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002190:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fcab 	bl	8000af4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a2:	f7fe fca7 	bl	8000af4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0df      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b4:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80021b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80d3 	beq.w	8002372 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021cc:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	f000 808d 	beq.w	80022f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d15a      	bne.n	8002298 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fc81 	bl	8000af4 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fc7d 	bl	8000af4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0b5      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x580>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6a11      	ldr	r1, [r2, #32]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002224:	3a01      	subs	r2, #1
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800222e:	0212      	lsls	r2, r2, #8
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002236:	0852      	lsrs	r2, r2, #1
 8002238:	3a01      	subs	r2, #1
 800223a:	0552      	lsls	r2, r2, #21
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002242:	0852      	lsrs	r2, r2, #1
 8002244:	3a01      	subs	r2, #1
 8002246:	0652      	lsls	r2, r2, #25
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800224e:	06d2      	lsls	r2, r2, #27
 8002250:	430a      	orrs	r2, r1
 8002252:	491d      	ldr	r1, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002254:	4313      	orrs	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fc40 	bl	8000af4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fc3c 	bl	8000af4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e074      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x528>
 8002296:	e06c      	b.n	8002372 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 800229e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc18 	bl	8000af4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	e00e      	b.n	80022e6 <HAL_RCC_OscConfig+0x596>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fc0e 	bl	8000af4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e046      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_OscConfig+0x62c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x584>
 80022f2:	e03e      	b.n	8002372 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e039      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_OscConfig+0x62c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d12c      	bne.n	800236e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d123      	bne.n	800236e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11b      	bne.n	800236e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d113      	bne.n	800236e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d109      	bne.n	800236e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000

08002380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e11e      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 020f 	bic.w	r2, r3, #15
 80023ae:	498c      	ldr	r1, [pc, #560]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b8a      	ldr	r3, [pc, #552]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e106      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d073      	beq.n	80024bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d129      	bne.n	8002430 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0f4      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023ec:	f000 f966 	bl	80026bc <RCC_GetSysClockFreqFromPLLSource>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a7c      	ldr	r2, [pc, #496]	; (80025e8 <HAL_RCC_ClockConfig+0x268>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d93f      	bls.n	800247a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023fa:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800240e:	2b00      	cmp	r3, #0
 8002410:	d033      	beq.n	800247a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12f      	bne.n	800247a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002422:	4a70      	ldr	r2, [pc, #448]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e024      	b.n	800247a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0c6      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0be      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002458:	f000 f8ce 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800245c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_RCC_ClockConfig+0x268>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d909      	bls.n	800247a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4957      	ldr	r1, [pc, #348]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fb32 	bl	8000af4 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fb2e 	bl	8000af4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e095      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
 800250e:	e008      	b.n	8002522 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d105      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a32      	ldr	r2, [pc, #200]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800251c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002520:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d21d      	bcs.n	800256c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 020f 	bic.w	r2, r3, #15
 8002538:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002540:	f7fe fad8 	bl	8000af4 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fad4 	bl	8000af4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03b      	b.n	80025d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d1ed      	bne.n	8002548 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490f      	ldr	r1, [pc, #60]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025aa:	f000 f825 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_RCC_ClockConfig+0x26c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	fa21 f303 	lsr.w	r3, r1, r3
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x270>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fa44 	bl	8000a5c <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	04c4b400 	.word	0x04c4b400
 80025ec:	08002c64 	.word	0x08002c64
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d102      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e047      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d102      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e03e      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d136      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68d2      	ldr	r2, [r2, #12]
 8002658:	0a12      	lsrs	r2, r2, #8
 800265a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e00c      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	68d2      	ldr	r2, [r2, #12]
 8002672:	0a12      	lsrs	r2, r2, #8
 8002674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
      break;
 800267e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0e5b      	lsrs	r3, r3, #25
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e001      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a0:	693b      	ldr	r3, [r7, #16]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	007a1200 	.word	0x007a1200

080026bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d10c      	bne.n	80026fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ea:	68d2      	ldr	r2, [r2, #12]
 80026ec:	0a12      	lsrs	r2, r2, #8
 80026ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
    break;
 80026f8:	e00c      	b.n	8002714 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	0a12      	lsrs	r2, r2, #8
 8002708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    break;
 8002712:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0e5b      	lsrs	r3, r3, #25
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800272e:	687b      	ldr	r3, [r7, #4]
}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40021000 	.word	0x40021000
 8002740:	007a1200 	.word	0x007a1200
 8002744:	00f42400 	.word	0x00f42400

08002748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002750:	2300      	movs	r3, #0
 8002752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002754:	2300      	movs	r3, #0
 8002756:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8098 	beq.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800279e:	f7fe f9a9 	bl	8000af4 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a4:	e009      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fe f9a5 	bl	8000af4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d902      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	74fb      	strb	r3, [r7, #19]
        break;
 80027b8:	e005      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ef      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d159      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01e      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d019      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe f965 	bl	8000af4 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282c:	e00b      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe f961 	bl	8000af4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d902      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	74fb      	strb	r3, [r7, #19]
            break;
 8002844:	e006      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ec      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002870:	e008      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e005      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002884:	7c7b      	ldrb	r3, [r7, #17]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288a:	4baf      	ldr	r3, [pc, #700]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	4aae      	ldr	r2, [pc, #696]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a2:	4ba9      	ldr	r3, [pc, #676]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 0203 	bic.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	49a5      	ldr	r1, [pc, #660]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 020c 	bic.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	499d      	ldr	r1, [pc, #628]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e6:	4b98      	ldr	r3, [pc, #608]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4994      	ldr	r1, [pc, #592]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002908:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	498c      	ldr	r1, [pc, #560]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800292a:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4983      	ldr	r1, [pc, #524]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	497b      	ldr	r1, [pc, #492]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4972      	ldr	r1, [pc, #456]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	496a      	ldr	r1, [pc, #424]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	4961      	ldr	r1, [pc, #388]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029d4:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	4959      	ldr	r1, [pc, #356]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	4950      	ldr	r1, [pc, #320]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4948      	ldr	r1, [pc, #288]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a50:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	493a      	ldr	r1, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a70:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	492c      	ldr	r1, [pc, #176]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	491e      	ldr	r1, [pc, #120]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4910      	ldr	r1, [pc, #64]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d018      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4902      	ldr	r1, [pc, #8]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b46:	e001      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b48:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b54:	d105      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	4917      	ldr	r1, [pc, #92]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	4909      	ldr	r1, [pc, #36]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1ba4      	subs	r4, r4, r6
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2500      	movs	r5, #0
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4e0b      	ldr	r6, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 f820 	bl	8002c38 <_init>
 8002bf8:	1ba4      	subs	r4, r4, r6
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	42a5      	cmp	r5, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c08:	4798      	blx	r3
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c12:	4798      	blx	r3
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002c84 	.word	0x08002c84
 8002c1c:	08002c84 	.word	0x08002c84
 8002c20:	08002c84 	.word	0x08002c84
 8002c24:	08002c88 	.word	0x08002c88

08002c28 <memset>:
 8002c28:	4402      	add	r2, r0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
